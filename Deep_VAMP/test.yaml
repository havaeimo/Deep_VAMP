!obj:pylearn2.train.Train {
    dataset: &train !obj:pylearn2.datasets.deep_vamp.VAMP {
      center: False,
      gcn: False,
      toronto_prepro: True,
      #axes: ['b', 0, 1, 'c'],
      start: 0,
      stop: 3000,
      image_resize: 32
    },


    model: !obj:pylearn2.models.mlp.MLP {
        batch_size: 100,
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [32, 32],
            num_channels: 3
        },
        layers: [ !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 }, !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: 64,
                     irange: .05,
                     kernel_shape: [5, 5],
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     max_kernel_norm: 1.9365
                 }, !obj:pylearn2.models.mlp.Softmax {
                     max_col_norm: 1.9365,
                     layer_name: 'y',
                     n_classes: 2,
                     istdev: .05
                 }
                ],
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 100,
        learning_rate: .01,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.5,
        },
        monitoring_dataset:
            {
 'valid' :  !obj:pylearn2.datasets.deep_vamp.VAMP {
      center: False,
      gcn: False,
      toronto_prepro: True,
      #axes: ['b', 0, 1, 'c'],
      start: 3000,
      stop: 3200,
      image_resize: 32
    },


                'test'  :  !obj:pylearn2.datasets.deep_vamp.real_VAMP {
      center: False,
      gcn: False,
      toronto_prepro: True,
      #axes: ['b', 0, 1, 'c'],
      start: 0,
      stop: 2000,
      image_resize: 32
    },


                          
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X'
            }, #!obj:pylearn2.costs.mlp.WeightDecay {
               # coeffs: [ .00005, .00005, .00005 ]
           # }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.And {
            criteria: [
                !obj:pylearn2.termination_criteria.MonitorBased {
                    channel_name: "valid_y_misclass",
                    prop_decrease: 0.50,
                    N: 10
                },
                !obj:pylearn2.termination_criteria.EpochCounter {
                    max_epochs: 500
                },
            ]
        },
    },
    extensions:
        [ !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "./convolutional_network_best.pkl"
        }, !obj:pylearn2.training_algorithms.learning_rule.MomentumAdjustor {
            start: 1,
            saturate: 10,
            final_momentum: .99
        }
    ]
}
